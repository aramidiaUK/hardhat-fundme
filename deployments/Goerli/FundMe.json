{
  "address": "0xd9dE072900d6862499032DA5Ab16FCE2B2C10325",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd8f076daa446a5c7e6b38680df1b696d4e636db7cb581c54bff78d50d745f3fe",
  "receipt": {
    "to": null,
    "from": "0x98d1824DB86AFD491673e8E9AaBc6EF415C9c4AB",
    "contractAddress": "0xd9dE072900d6862499032DA5Ab16FCE2B2C10325",
    "transactionIndex": 43,
    "gasUsed": "1029124",
    "logsBloom": "0x
    "blockHash": "0x093a32076114e78fc523c95505415246d2852af72a156d2b8d63ad4fec3cd045",
    "transactionHash": "0xd8f076daa446a5c7e6b38680df1b696d4e636db7cb581c54bff78d50d745f3fe",
    "logs": [],
    "blockNumber": 7991623,
    "cumulativeGasUsed": "10331530",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 5,
  "solcInputHash": "e36ce36284f7c377ef77e719e2cc703d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Henry and Aramidia Team\",\"details\":\"this implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"this implements price feeds as our library\"}},\"title\":\"FundMe A contract for crowdfunding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Functions Order Constructor receive fallback external public internal private view / pure\"},\"fund()\":{\"notice\":\"This functionfunds the contract\"}},\"notice\":\"This contract is demo of a crowdfunding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// pragma\\npragma solidity ^0.8.8;\\n\\n// imports\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// import hardhat/console.sol to use console.log()\\n\\n// error codes\\nerror FundMe__NotOwner();\\n\\n// Interfacesm Libraries, Contracts\\n\\n/**\\n * @title FundMe A contract for crowdfunding\\n * @author Henry and Aramidia Team\\n * @notice This contract is demo of a crowdfunding contract\\n * @dev this implements price feeds as our library\\n */\\ncontract FundMe {\\n  // Type declarations\\n  using PriceConverter for uint256;\\n\\n  // State Variables\\n  uint256 public constant MINIMUM_USD = 50 * 1e18;\\n  address[] private s_funders;\\n  mapping(address => uint256) private s_addressToAmmountFunded;\\n  address private immutable i_owner;\\n\\n  AggregatorV3Interface public s_priceFeed;\\n\\n  // modifiers\\n  modifier onlyOwner() {\\n    if (msg.sender != i_owner) revert FundMe__NotOwner();\\n    _;\\n  }\\n\\n  /**\\n   * Functions Order\\n   * Constructor\\n   * receive\\n   * fallback\\n   * external\\n   * public\\n   * internal\\n   * private\\n   * view / pure\\n   */\\n\\n  // functions\\n  constructor(address priceFeedAddress) {\\n    i_owner = msg.sender;\\n    s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n  }\\n\\n  // receive() external payable {\\n  //   fund();\\n  // }\\n\\n  // fallback() external payable {\\n  //   fund();\\n  // }\\n\\n  /**\\n   * @notice This functionfunds the contract\\n   * @dev this implements price feeds as our library\\n   */\\n  function fund() public payable {\\n    // Want to be able to set a minimum fund ammount in USD\\n    // 1. How do we send ETH to this contact?\\n\\n    require(\\n      msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n      \\\"Didn't send enough!!\\\"\\n    ); // 1e18 = 1 * 10 ** 18 == 1000000000000000000;\\n    //18 decimals\\n    s_funders.push(msg.sender);\\n    s_addressToAmmountFunded[msg.sender] = msg.value;\\n  }\\n\\n  function withdraw() public onlyOwner {\\n    for (\\n      uint256 funderIndex = 0;\\n      funderIndex < s_funders.length;\\n      funderIndex++\\n    ) {\\n      address funder = s_funders[funderIndex];\\n      s_addressToAmmountFunded[funder] = 0;\\n    }\\n\\n    // reset array\\n    s_funders = new address[](0);\\n\\n    // call (forward all gas or set gas, returns bool)\\n    (bool callSuccess, ) = payable(msg.sender).call{\\n      value: address(this).balance\\n    }(\\\"\\\");\\n    require(callSuccess, \\\"Call Failed\\\");\\n  }\\n\\n  function cheaperWithdraw() public payable onlyOwner {\\n    address[] memory funders = s_funders;\\n    for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\\n      address funder = funders[funderIndex];\\n      s_addressToAmmountFunded[funder] = 0;\\n    }\\n    s_funders = new address[](0);\\n    (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n    require(success);\\n  }\\n\\n  function getOwners() public view returns (address) {\\n    return i_owner;\\n  }\\n\\n  function getFunder(uint256 index) public view returns (address) {\\n    return s_funders[index];\\n  }\\n\\n  function getAddressToAmountFunded(address funder)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return s_addressToAmmountFunded[funder];\\n  }\\n\\n  function getPriceFeed() public view returns (AggregatorV3Interface) {\\n    return s_priceFeed;\\n  }\\n}\\n\",\"keccak256\":\"0x896b8b3ede6adf5af976f33af6626b600d0e697618bc3d059f3d2814585bb3bb\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n  function getPrice(AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    // ABI\\n    // Address of the contact 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n\\n    // ETH in terms of USD\\n    return uint256(answer * 10000000000); // 1**10 == 1000000000\\n  }\\n\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    uint256 ethAmountUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n\\n    return ethAmountUsd;\\n  }\\n}\\n\",\"keccak256\":\"0xf0bbea3083d42310d885862ccbf73bd410578637f8e71a81a9695725b296b68f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012c6380380620012c6833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c611140620001866000396000818161024d015281816104c601528181610615015261080b01526111406000f3fe6080604052600436106100865760003560e01c80639e87a5cd116100595780639e87a5cd14610135578063a0e67e2b14610160578063b60d42881461018b578063be2693f014610195578063d7b4750c1461019f57610086565b80630343fb251461008b5780630ec3b027146100c85780633ccfd60b146100f35780636b69a5921461010a575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610ace565b6101dc565b6040516100bf9190610b14565b60405180910390f35b3480156100d457600080fd5b506100dd610225565b6040516100ea9190610b8e565b60405180910390f35b3480156100ff57600080fd5b5061010861024b565b005b34801561011657600080fd5b5061011f61048b565b60405161012c9190610b14565b60405180910390f35b34801561014157600080fd5b5061014a610498565b6040516101579190610b8e565b60405180910390f35b34801561016c57600080fd5b506101756104c2565b6040516101829190610bb8565b60405180910390f35b6101936104ea565b005b61019d610613565b005b3480156101ab57600080fd5b506101c660048036038101906101c19190610bff565b6108a1565b6040516101d39190610bb8565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102d0576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561037b5760008082815481106102f5576102f4610c2c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061037390610c8a565b9150506102d3565b50600067ffffffffffffffff81111561039757610396610cd3565b5b6040519080825280602002602001820160405280156103c55781602001602082028036833780820191505090505b50600090805190602001906103db9291906109c4565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161040290610d33565b60006040518083038185875af1925050503d806000811461043f576040519150601f19603f3d011682016040523d82523d6000602084013e610444565b606091505b5050905080610488576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047f90610da5565b60405180910390fd5b50565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6802b5e3af16b1880000610529600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108e890919063ffffffff16565b101561056a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056190610e11565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610698576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561071b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106d1575b5050505050905060005b81518110156107a657600082828151811061074357610742610c2c565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061079e90610c8a565b915050610725565b50600067ffffffffffffffff8111156107c2576107c1610cd3565b5b6040519080825280602002602001820160405280156107f05781602001602082028036833780820191505090505b50600090805190602001906108069291906109c4565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161084d90610d33565b60006040518083038185875af1925050503d806000811461088a576040519150601f19603f3d011682016040523d82523d6000602084013e61088f565b606091505b505090508061089d57600080fd5b5050565b60008082815481106108b6576108b5610c2c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108f483610924565b90506000670de0b6b3a7640000858361090d9190610e31565b6109179190610eba565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561096d57600080fd5b505afa158015610981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a59190610f78565b5050509150506402540be400816109bc9190610ff3565b915050919050565b828054828255906000526020600020908101928215610a3d579160200282015b82811115610a3c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109e4565b5b509050610a4a9190610a4e565b5090565b5b80821115610a67576000816000905550600101610a4f565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a9b82610a70565b9050919050565b610aab81610a90565b8114610ab657600080fd5b50565b600081359050610ac881610aa2565b92915050565b600060208284031215610ae457610ae3610a6b565b5b6000610af284828501610ab9565b91505092915050565b6000819050919050565b610b0e81610afb565b82525050565b6000602082019050610b296000830184610b05565b92915050565b6000819050919050565b6000610b54610b4f610b4a84610a70565b610b2f565b610a70565b9050919050565b6000610b6682610b39565b9050919050565b6000610b7882610b5b565b9050919050565b610b8881610b6d565b82525050565b6000602082019050610ba36000830184610b7f565b92915050565b610bb281610a90565b82525050565b6000602082019050610bcd6000830184610ba9565b92915050565b610bdc81610afb565b8114610be757600080fd5b50565b600081359050610bf981610bd3565b92915050565b600060208284031215610c1557610c14610a6b565b5b6000610c2384828501610bea565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c9582610afb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cc857610cc7610c5b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d1d600083610d02565b9150610d2882610d0d565b600082019050919050565b6000610d3e82610d10565b9150819050919050565b600082825260208201905092915050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610d8f600b83610d48565b9150610d9a82610d59565b602082019050919050565b60006020820190508181036000830152610dbe81610d82565b9050919050565b7f4469646e27742073656e6420656e6f7567682121000000000000000000000000600082015250565b6000610dfb601483610d48565b9150610e0682610dc5565b602082019050919050565b60006020820190508181036000830152610e2a81610dee565b9050919050565b6000610e3c82610afb565b9150610e4783610afb565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e8057610e7f610c5b565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ec582610afb565b9150610ed083610afb565b925082610ee057610edf610e8b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f0a81610eeb565b8114610f1557600080fd5b50565b600081519050610f2781610f01565b92915050565b6000819050919050565b610f4081610f2d565b8114610f4b57600080fd5b50565b600081519050610f5d81610f37565b92915050565b600081519050610f7281610bd3565b92915050565b600080600080600060a08688031215610f9457610f93610a6b565b5b6000610fa288828901610f18565b9550506020610fb388828901610f4e565b9450506040610fc488828901610f63565b9350506060610fd588828901610f63565b9250506080610fe688828901610f18565b9150509295509295909350565b6000610ffe82610f2d565b915061100983610f2d565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561104857611047610c5b565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561108557611084610c5b565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110c2576110c1610c5b565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110ff576110fe610c5b565b5b82820290509291505056fea2646970667358221220fdf73797e7e25a66a2c482802cfff3dcac78b7193fcf07ab69408352f07e9edb64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c80639e87a5cd116100595780639e87a5cd14610135578063a0e67e2b14610160578063b60d42881461018b578063be2693f014610195578063d7b4750c1461019f57610086565b80630343fb251461008b5780630ec3b027146100c85780633ccfd60b146100f35780636b69a5921461010a575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610ace565b6101dc565b6040516100bf9190610b14565b60405180910390f35b3480156100d457600080fd5b506100dd610225565b6040516100ea9190610b8e565b60405180910390f35b3480156100ff57600080fd5b5061010861024b565b005b34801561011657600080fd5b5061011f61048b565b60405161012c9190610b14565b60405180910390f35b34801561014157600080fd5b5061014a610498565b6040516101579190610b8e565b60405180910390f35b34801561016c57600080fd5b506101756104c2565b6040516101829190610bb8565b60405180910390f35b6101936104ea565b005b61019d610613565b005b3480156101ab57600080fd5b506101c660048036038101906101c19190610bff565b6108a1565b6040516101d39190610bb8565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102d0576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561037b5760008082815481106102f5576102f4610c2c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061037390610c8a565b9150506102d3565b50600067ffffffffffffffff81111561039757610396610cd3565b5b6040519080825280602002602001820160405280156103c55781602001602082028036833780820191505090505b50600090805190602001906103db9291906109c4565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161040290610d33565b60006040518083038185875af1925050503d806000811461043f576040519150601f19603f3d011682016040523d82523d6000602084013e610444565b606091505b5050905080610488576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047f90610da5565b60405180910390fd5b50565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6802b5e3af16b1880000610529600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108e890919063ffffffff16565b101561056a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056190610e11565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610698576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561071b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106d1575b5050505050905060005b81518110156107a657600082828151811061074357610742610c2c565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061079e90610c8a565b915050610725565b50600067ffffffffffffffff8111156107c2576107c1610cd3565b5b6040519080825280602002602001820160405280156107f05781602001602082028036833780820191505090505b50600090805190602001906108069291906109c4565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161084d90610d33565b60006040518083038185875af1925050503d806000811461088a576040519150601f19603f3d011682016040523d82523d6000602084013e61088f565b606091505b505090508061089d57600080fd5b5050565b60008082815481106108b6576108b5610c2c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108f483610924565b90506000670de0b6b3a7640000858361090d9190610e31565b6109179190610eba565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561096d57600080fd5b505afa158015610981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a59190610f78565b5050509150506402540be400816109bc9190610ff3565b915050919050565b828054828255906000526020600020908101928215610a3d579160200282015b82811115610a3c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109e4565b5b509050610a4a9190610a4e565b5090565b5b80821115610a67576000816000905550600101610a4f565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a9b82610a70565b9050919050565b610aab81610a90565b8114610ab657600080fd5b50565b600081359050610ac881610aa2565b92915050565b600060208284031215610ae457610ae3610a6b565b5b6000610af284828501610ab9565b91505092915050565b6000819050919050565b610b0e81610afb565b82525050565b6000602082019050610b296000830184610b05565b92915050565b6000819050919050565b6000610b54610b4f610b4a84610a70565b610b2f565b610a70565b9050919050565b6000610b6682610b39565b9050919050565b6000610b7882610b5b565b9050919050565b610b8881610b6d565b82525050565b6000602082019050610ba36000830184610b7f565b92915050565b610bb281610a90565b82525050565b6000602082019050610bcd6000830184610ba9565b92915050565b610bdc81610afb565b8114610be757600080fd5b50565b600081359050610bf981610bd3565b92915050565b600060208284031215610c1557610c14610a6b565b5b6000610c2384828501610bea565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c9582610afb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cc857610cc7610c5b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d1d600083610d02565b9150610d2882610d0d565b600082019050919050565b6000610d3e82610d10565b9150819050919050565b600082825260208201905092915050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610d8f600b83610d48565b9150610d9a82610d59565b602082019050919050565b60006020820190508181036000830152610dbe81610d82565b9050919050565b7f4469646e27742073656e6420656e6f7567682121000000000000000000000000600082015250565b6000610dfb601483610d48565b9150610e0682610dc5565b602082019050919050565b60006020820190508181036000830152610e2a81610dee565b9050919050565b6000610e3c82610afb565b9150610e4783610afb565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e8057610e7f610c5b565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ec582610afb565b9150610ed083610afb565b925082610ee057610edf610e8b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f0a81610eeb565b8114610f1557600080fd5b50565b600081519050610f2781610f01565b92915050565b6000819050919050565b610f4081610f2d565b8114610f4b57600080fd5b50565b600081519050610f5d81610f37565b92915050565b600081519050610f7281610bd3565b92915050565b600080600080600060a08688031215610f9457610f93610a6b565b5b6000610fa288828901610f18565b9550506020610fb388828901610f4e565b9450506040610fc488828901610f63565b9350506060610fd588828901610f63565b9250506080610fe688828901610f18565b9150509295509295909350565b6000610ffe82610f2d565b915061100983610f2d565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561104857611047610c5b565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561108557611084610c5b565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110c2576110c1610c5b565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110ff576110fe610c5b565b5b82820290509291505056fea2646970667358221220fdf73797e7e25a66a2c482802cfff3dcac78b7193fcf07ab69408352f07e9edb64736f6c63430008080033",
  "devdoc": {
    "author": "Henry and Aramidia Team",
    "details": "this implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "this implements price feeds as our library"
      }
    },
    "title": "FundMe A contract for crowdfunding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Functions Order Constructor receive fallback external public internal private view / pure"
      },
      "fund()": {
        "notice": "This functionfunds the contract"
      }
    },
    "notice": "This contract is demo of a crowdfunding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}